class Graph:
    def __init__(self,val):
        self.node_id = 0;
        self.node = {self.node_id:val};
        self.edge = {self.node_id:[]};
    def insert(self,val,l1,l2): #val是该节点的值，l1是该点所指向的子节点，l2是该节点的父节点
        self.node_id += 1;
        self.node[self.node_id] = val;
        for e in l2:
            self.edge[e].append(self.node_id)
        self.edge[self.node_id] = l1;
    def exist_val(self,val):
        value = self.node.values()
        return val in value
    def show(self):
        print(self.node);
        print(self.edge);

class BinaryTree(Graph):
    def insert(self,val,parent):
        if(len(self.edge[parent]) <= 1): #如果父节点的位置小于等于1时候，即父节点还有位置给子节点进行操作时候，执行该操作
            super().insert(val,[],[parent]) #使用父类的insert方法，即默认子节点不存在，父节点为parent
        else:
            print('failed');
    def show(self):
        print('节点的信息：',self.node);
        print('子节点的信息：',self.edge);

graph = Graph(2)
graph.insert(3,[],[0]);
graph.insert(5,[0],[1]);
graph.show();

tree = BinaryTree(2);
tree.insert(3,0);
tree.insert(4,0);
tree.show();
